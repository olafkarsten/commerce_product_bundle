<?php

/**
 * @file
 * Contains commerce_product_bundle.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\CurrentRouteMatch;
use Drupal\entity\BundleFieldDefinition;
use Drupal\commerce_product_bundle\Entity\BundleTypeInterface;

/**
 * Implements hook_help().
 */
function commerce_product_bundle_help($route_name, CurrentRouteMatch $route_match) {
  switch ($route_name) {
    // Main module help for the commerce_product_bundle module.
    case 'help.page.commerce_product_bundle':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Extends Drupal Commerce with a product bundle functionality.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function commerce_product_bundle_theme() {
  return [
    'commerce_product_bundle_form' => [
      'render element' => 'form',
    ],
    'commerce_product_bundle' => [
      'render element' => 'elements',
    ],
    'commerce_product_bundle_i' => [
      'render element' => 'elements',
    ],
    'container__field__widget_commerce_product_bundle_items' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function commerce_product_bundle_theme_suggestions_commerce_product_bundle(array $variables) {
  return _commerce_entity_theme_suggestions('commerce_product_bundle', $variables);
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function commerce_product_bundle_theme_suggestions_commerce_product_bundle_i(array $variables) {
  return _commerce_entity_theme_suggestions('commerce_product_bundle_i', $variables);
}

/**
 * Prepares variables for product bundle templates.
 *
 * Default template: commerce-product-bundle.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_commerce_product_bundle(array &$variables) {
  /** @var Drupal\commerce_product_bundle\Entity\BundleInterface $bundle */
  $product_bundle = $variables['elements']['#commerce_product_bundle'];

  $variables['product_bundle_entity'] = $product_bundle;
  $variables['product_bundle_url'] = $product_bundle->toUrl();
  $variables['product_bundle'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['product_bundle'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for product bundle item templates.
 *
 * Default template: commerce-product-bundle-i.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_commerce_product_bundle_i(array &$variables) {
  /** @var Drupal\commerce_product_bundle\Entity\BundleItemInterface $product_bundle_item */
  $product_bundle_item = $variables['elements']['#commerce_product_bundle_i'];

  $variables['product_bundle_item_entity'] = $product_bundle_item;
  $variables['product_bundle_item'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['product_bundle_item'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_form_alter().
 */
function commerce_product_bundle_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add theme wrapper for the product bundle items add to cart field widget.
  if (strpos($form_id, 'add_to_cart') !== FALSE && substr($form_id, 0, 43) == 'commerce_order_item_commerce_product_bundle') {
    $form['purchased_entity']['#theme_wrappers'] = ['container__field__widget_commerce_product_bundle_items'];
  }
}

/**
 * Adds the default body field to a product bundle type.
 *
 * @param \Drupal\commerce_product_bundle\Entity\BundleTypeInterface $product_bundle_type
 *   The product bundle type.
 * @param string $label
 *   (optional) The label for the body instance. Defaults to 'Body'.
 */
function commerce_product_bundle_add_body_field(BundleTypeInterface $product_bundle_type, $label = 'Body') {
  $field_definition = BundleFieldDefinition::create('text_with_summary')
    ->setTargetEntityTypeId('commerce_product_bundle')
    ->setTargetBundle($product_bundle_type->id())
    ->setName('body')
    ->setLabel($label)
    ->setSetting('display_summary', FALSE)
    ->setDisplayOptions('form', [
      'type' => 'text_textarea_with_summary',
      'weight' => 1,
    ])
    ->setDisplayOptions('view', [
      'label' => 'hidden',
      'type' => 'text_default',
    ]);

  $configurable_field_manager = \Drupal::service('commerce.configurable_field_manager');
  $configurable_field_manager->createField($field_definition, FALSE);
}

/**
 * Implements hook_field_widget_form_alter().
 */
function commerce_product_bundle_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
  $field_definition = $context['items']->getFieldDefinition();
  $field_name = $field_definition->getName();
  $entity_type = $field_definition->getTargetEntityTypeId();
  $widget_name = $context['widget']->getPluginId();
  $required = $field_definition->isRequired();
  if ($field_name == 'path' && $entity_type == 'commerce_product_bundle' && $widget_name == 'path') {
    $element['alias']['#description'] = t('The alternative URL for this product. Use a relative path. For example, "/my-product-bundle".');
  }
}

/**
 * Implements hook_search_api_views_handler_mapping_alter().
 *
 * Search API views filters do not use the options filter by default
 * for all entity bundle fields.
 *
 * @see https://www.drupal.org/project/search_api/issues/2847994
 */
function commerce_product_bundle_search_api_views_handler_mapping_alter(array &$mapping) {
  $mapping['entity:commerce_product_bundle_type'] = [
    'argument' => [
      'id' => 'search_api',
    ],
    'filter' => [
      'id' => 'search_api_options',
      'options callback' => 'commerce_product_bundle_type_labels',
    ],
    'sort' => [
      'id' => 'search_api',
    ],
  ];
}

/**
 * Gets the list of available product bundle type labels.
 *
 * @return string[]
 *   The product bundle type labels, keyed by product bundle type ID.
 */
function commerce_product_bundle_type_labels() {
  $product_bundle_type_storage = \Drupal::entityTypeManager()->getStorage('commerce_product_bundle_type');
  $product_bundle_types = $product_bundle_type_storage->loadMultiple();

  return EntityHelper::extractLabels($product_bundle_types);
}
